;-----------------------------------------------------------------------------------
;
; Write your scripts in this file
;
; Please, read the Info Tab for instructions...
;
;-----------------------------------------------------------------------------------

; You can add a comment starting with ";"
; First Script
to script1
  clear            ; Clear everything
  BA-PA 100 2 1    ; Create a Preferential Attatchment Network with 300 nodes
  layout "spring"  ; Draw it with a spring distribution
  ask nodes [
  ; Set opinion between -1 and 1
    set typ (list ((random-float 2) - 1))
    new-state current_state + abs(current_state) * (0)
    set-state
    set color scale-color blue current_state -1 1
  ]
end

; Second script
; Foreach sample
to script2
  print-csv ["p" "diameter"]
  foreach (range 0 .01 .001)
  [ [p] -> 
    clear
    BA-PA 300 2 1
    ER-RN 0 p
    print-csv (list p diameter)
  ]
end

; Third script
; Spread Dynamics sample
to script3
  clear
  print-csv ["Healthy" "Infected" "Recovery"]
  ER-RN 300 .01
  layout "spring"
  repeat 10 
  [ Spread 1 0.3 0.3 0 50
    print-csv spread-summary
  ]
end

; Fourth script
; Small World network sample
to script4
  clear
  foreach (range 10 50 10)
  [ [p] -> 
    clear
    WS p 4 0
    layout "circle"
  ]
end

; Fifth script
; Several repetitions for every value of the parameter sample
to script5 
  clear 
  print-csv ["p" "diameter"]
  foreach (range 0 .01 .001)
  [ [p] ->
    repeat 10
    [
      clear 
      BA-PA 300 2 1
      ER-RN 0 p
      print-csv (list p diameter)
    ]
  ]
end

; Sixth script
; Same as previous but storing and compputing mean of the 10 experiments 
;   for every probability value. After that, prints all the means and
;   draws the plot (p,dm)
to script6 
  clear 
  let ds []
  let ys []
  print-csv ["p" "mean-diameter"]
  foreach (range 0 .01 .001)
  [ [p] ->
    repeat 10
    [
      clear 
      BA-PA 200 2 1
      ER-RN 0 p
      set ds store diameter ds
    ]
    set ys store (mean ds) ys
    print-csv (list p (mean ds))
    set ds [] 
  ]
  print ys
  plotTable (range 0 .01 .001) ys
end

to script7
  clear
  BA-PA 300 2 1
  layout "spring"
  let cs []
  repeat 100
  [
    remove-node "uniform"
    compute-centralities
    compute-components
    set cs store (length components) cs
  ]
  plotTable (range 100) cs
end

to script8
  clear
  BA-PA 300 2 1
  layout "spring"
  let cs []
  repeat 100
  [
    remove-node "degree"
    compute-centralities
    compute-components
    set cs store (length components) cs
  ]
  plotTable (range 100) cs
end

to demoER
  clear
  foreach (range 0 .3 .01) 
  [ [p] ->
    clear
    no-display
    ER-RN 40 p
    layout "circle"
    display
    plots
    wait .1
  ]
  layout "spring"
end

to demoWS
  clear
  foreach (range 0 .3 .01) 
  [ [p] ->
    clear
    no-display
    WS 40 4 p
    layout "circle"
    display
    plots
    wait .1
  ]
  layout "spring"
end

to demoBA
  clear
  foreach (range 1 5 1)
  [ p ->
    clear
    BA-PA 100 2 p
    plots
    layout "spring"
    wait 1
  ]
end

to demoGeo
  clear
  foreach (range 1 10 1)
  [ p ->
    clear
    Geom 200 p
    compute-centralities
    plots
    wait 1
  ]
end

to demoGrid
  clear
  Grid 10 10 false
  layout "spring"
  let cl []
  repeat 100
  [ Rewire .01
    compute-centralities
    plots
    set cl store Average-clustering cl 
  ]
  print cl
  plotTable (range 0 100) cl
end

to demoSpread
  clear
  Grid 10 10 false
  layout "spring"
  spread 1 .1 .1 .01 1000
end

to demoSpread2
  clear
  BA-PA 300 2 1
  ER-RN 0 .001
  layout "spring"
  spread 1 .1 .1 .01 1000
end

;------------- Connected components ---------------
to-report component-sizes
  compute-components
  report map count components
end

to demo-sc-components
  clear 
  ER-RN 300 .01
  print component-sizes
end
