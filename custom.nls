globals [
    iters
    ad_freq
]

; Opinion Dynamics
; bias - Initial Opinion bias
; mem - Memory
; tol - Tolerance range
to Opinions
  set-current-plot "Opinion clustering"
  clear-plot
  set-current-plot "Mean Opinion"
  clear-plot
  set-plot-y-range 0 1

  if Reset [init_opinions_cont]
  set iters 0
  set ad_freq (round (Iterations / (ad_count + 2)))

  repeat Iterations [
    step
    set iters iters + 1
  ]
  stop
end

to step
; Plot the opinion clustering
  set-current-plot "Opinion clustering"
  plotxy iters Mean_Opinion_Clustering

  set-current-plot "Mean Opinion"
  ; Plot the average opinion
  let avg mean [current_state] of nodes
  plotxy iters avg

  OpCh
  if Advertising and ((iters mod ad_freq) = 0 and iters != 0 and iters != Iterations) [
    if ad_type = "random" [MassAd]
    if ad_type = "max_opinion" [MaxAd]
    if ad_type = "min_opinion" [MinAd]
    if ad_type = "hubs" [HubsAd]
    if ad_type = "neighborhood" [NeighborhoodAd]

    plot-pen-up
    plotxy iters 0
    plot-pen-down
    plotxy iters plot-y-max
    plotxy iters avg
  ]

  if iters = Iterations [ stop ]
end

; Opinion change
; mem - Memory
; tol - tolerance range
to OpCh
    no-display
    ask nodes [
        let s current_state
    
        if (Change_model = "voter") [
            if (count link-neighbors != 0) [
                new-state ([current_state] of (one-of link-neighbors))
            ]
        ]
        if (Change_model = "biased_average") [
            ; Take the average of neighbors' opinions withing a tolerance range
            ; tolerance range = 0.2
            let neighbors_opinions_sum sum ([current_state] of link-neighbors with [abs (current_state - s) <= 0.2])
            let neighbors_opinions_count count link-neighbors with [abs (current_state - s) <= 0.2]
            ifelse neighbors_opinions_count = 0 [
                new-state s
            ] [
                new-state neighbors_opinions_sum / neighbors_opinions_count
            ]
        ]
        let bias 0.03
        if (Change_model = "biased") [
            let neighbors_opinions_sum sum ([current_state] of link-neighbors)
            let neighbors_opinions_count count link-neighbors
            let nom memory * current_state + ((current_state ^ bias) * neighbors_opinions_sum)
            let denom memory + ((current_state ^ bias) * neighbors_opinions_sum) + ((1 - current_state) ^ bias) * (neighbors_opinions_count - neighbors_opinions_sum)
            new-state nom / denom
        ]
        ; Randomly pick a neighbor and move by 50% of the distance between the his opinion and mine
        if (Change_model = "continuous_voter") [
            if (count link-neighbors != 0) [
                let neighbor one-of link-neighbors
                let neighbor_state [current_state] of neighbor
                let diff neighbor_state - s
                new-state s + diff * 0.9
            ]
        ]
        set-state
    ]
    ask nodes [
        set color scale-color blue current_state 0 1
    ]
    display
end


; Advertising

; Random advertising
; Nudge every node to 1 with a certain probability
to MassAd
  ask (n-of (min (list ad_targets (count nodes))) nodes) [
    if random-float 1 < ad_effectiveness [
      let curr current_state
      new-state (min list (max list (curr + ad_effect) 0) 1)
      set-state
    ]
  ]
end

; Target those with max opinion
to MaxAd []
  ask max-n-of (min (list ad_targets (count nodes))) nodes [current_state] [
    if random-float 1 < ad_effectiveness [
      let curr current_state
      new-state (min list (max list (curr + ad_effect) 0) 1)
      set-state
    ]
  ]
end

; Target those with min opinion
to MinAd []
  ask min-n-of (min (list ad_targets (count nodes))) nodes [current_state] [
    if random-float 1 < ad_effectiveness [
      let curr current_state
      new-state (min list (max list (curr + ad_effect) 0) 1)
      set-state
    ]
  ]
end

; Target those with most neighbors
to HubsAd
  ask max-n-of (min (list ad_targets (count nodes))) nodes [count link-neighbors] [
    if random-float 1 < ad_effectiveness [
      let curr current_state
      new-state (min list (max list (curr + ad_effect) 0) 1)
      set-state
    ]
  ]
end

; Infect [ad_targets] random nodes and target them
to NeighborhoodAd
  Uninfect
  Infect
  Colorinfected
  ; Target infected nodes
  ask nodes with [infected = true] [
    if random-float 1 < ad_effectiveness [
      let curr current_state
      new-state (min list (max list (curr + ad_effect) 0) 1)
      set-state
    ]
  ]
end

; Infect [ad_targets] nodes who are neighbors of a random node - neighborhood of size [ad_targets]
to Infect
  ; Initialize the count of infected nodes
  let infected_count 0
  
  ; Pick a random node and infect it
  let random_node one-of nodes
  ask random_node [
    set infected true
  ]
  set infected_count 1

  ; Infect neighbors until exactly ad_targets nodes are infected
  while [infected_count < ad_targets] [
    let newly_infected 0
    ask nodes with [infected = true] [
      if newly_infected + infected_count < ad_targets [
        ask link-neighbors with [infected = false] [
          if newly_infected + infected_count < ad_targets [
            set infected true
            set newly_infected newly_infected + 1
          ]
        ]
      ]
    ]
    set infected_count infected_count + newly_infected

    ; Break the loop if no new infections were made to prevent infinite loop
    if newly_infected = 0 [
      stop
    ]
  ]
end

; Uninfect all nodes - set attribute infected to false
to Uninfect
  ask nodes [
    set infected false
  ]
end

; color/uncolor infected nodes red
to Colorinfected
  ask nodes [
    if infected = true [
      set color red
    ]
  ]
end

; color nodes according to their opinion
to ColorNodes
  ask nodes [
    set color scale-color blue current_state 0 1
  ]
end

to-report Mean_Opinion
  report mean [current_state] of nodes
end

; Similar opinion clustering defined as ratio of neighbors with an opinion within a tolerance range
to-report Opinion_Clustering_Opinion
  let my-opinion current_state
  let neighbors-opinions [current_state] of link-neighbors
  let tolerance-range 0.1
  let count-within-range 0
  let total-neighbors length neighbors-opinions
  foreach neighbors-opinions [
    x -> if abs (x - my-opinion) <= tolerance-range [
      set count-within-range count-within-range + 1
    ]
  ]
  ifelse total-neighbors = 0 [
    report 0  ; Avoid division by zero
  ] [
    report count-within-range / total-neighbors
  ]
end

to-report Mean_Opinion_Clustering
  let sum-opinion-clustering 0
  ask nodes [
    set sum-opinion-clustering sum-opinion-clustering + Opinion_Clustering_Opinion
  ]
  report sum-opinion-clustering / count nodes
end

to-report Standard_Deviation
  let avg mean [current_state] of nodes
  let res 0
  ask nodes [
    set res res + (current_state - avg) ^ 2
  ]
  report sqrt (res / count nodes)
end
